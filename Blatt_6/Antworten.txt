1.) Bei der Faltung eines einzigen Pixels mit einer 5x5-Matrix werden 25 voneinander Produkte berechnet und anschließend addiert. Da die Multiplikationen voneinander unabhängig sind, können sie Datenparallel ausgeführt werden. Der Nachteil dabei ist, dass z.B. bei einer Implementierung mit AVX und 32-Bit-Float-Pixeln nur maximal 8 Multiplikationen gleichzeitig ausgeführt werden können. Das bedeutet, dass bei insgesamt 25 Produkten die Parallelität nicht ganz ausgenutzt werden kann. Zieht man jedoch in betracht, dass sämtliche Pixel eines gesamten Bildes gefaltet werden, ergibt sich noch eine weitere Möglichkeit der Parallelisierung. In diesem Fall kann die Faltungssumme für mehrere Pixel gleichzeitig berechnet werden. Dies hat den Vorteil, dass die Parallelität besser ausgenutzt wird, zumal auch die Additionen parallelisiert werden können. Allerdings gibt es Probleme, wenn die Anzahl der Pixel pro Reihe -4 nicht durch den Parallelitätsgrad teilbar ist.

2.) Bei der Implementierung haben wir uns für die zweite Version entschieden, bei der die Faltung für 265/32=8 Pixel parallel berechnet wird. Dazu ist es erforderlich, die Werte der Gauss-Matrix jeweils so in ein 256-Bit Array zu kopieren, sodass sie darin 8 mal hintereinander stehen.

3.) Das Programm funktioniert erstaunlicherweise.
4.) T0D0: Messen
5.) T0D0: Parallelisieren
